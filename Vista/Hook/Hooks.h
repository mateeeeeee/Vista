#pragma once

namespace vista::hooks
{
	HRESULT STDMETHODCALLTYPE Present(IDXGISwapChain*, UINT, UINT);

	HRESULT STDMETHODCALLTYPE CreateCommandQueue(ID3D12Device*, const D3D12_COMMAND_QUEUE_DESC*, REFIID, void**);
	HRESULT STDMETHODCALLTYPE CreateCommandQueue1(ID3D12Device9*, const D3D12_COMMAND_QUEUE_DESC*, REFIID, REFIID, void**);
	HRESULT STDMETHODCALLTYPE CreateCommandList(ID3D12Device*, UINT, D3D12_COMMAND_LIST_TYPE, ID3D12CommandAllocator*, ID3D12PipelineState*, REFIID, void**);
	HRESULT STDMETHODCALLTYPE CreateCommandList1(ID3D12Device4*, UINT, D3D12_COMMAND_LIST_TYPE, D3D12_COMMAND_LIST_FLAGS, REFIID, void**);
	HRESULT STDMETHODCALLTYPE CreateCommandAllocator(ID3D12Device*, D3D12_COMMAND_LIST_TYPE, REFIID, void**);
	HRESULT STDMETHODCALLTYPE CreateHeap(ID3D12Device*, const D3D12_HEAP_DESC*, REFIID, void**);
	HRESULT STDMETHODCALLTYPE CreateHeap1(ID3D12Device4*, const D3D12_HEAP_DESC*, ID3D12ProtectedResourceSession*, REFIID, void**);
	HRESULT STDMETHODCALLTYPE CreateFence(ID3D12Device*, UINT64, D3D12_FENCE_FLAGS, REFIID, void**);
	HRESULT STDMETHODCALLTYPE CreateGraphicsPipelineState(ID3D12Device*, const D3D12_GRAPHICS_PIPELINE_STATE_DESC*, REFIID, void**);
	HRESULT STDMETHODCALLTYPE CreateComputePipelineState(ID3D12Device*, const D3D12_COMPUTE_PIPELINE_STATE_DESC*, REFIID, void**);
	HRESULT STDMETHODCALLTYPE CreatePipelineState(ID3D12Device2*, const D3D12_PIPELINE_STATE_STREAM_DESC*, REFIID, void**);
	HRESULT STDMETHODCALLTYPE CreateStateObject(ID3D12Device5*, const D3D12_STATE_OBJECT_DESC*, REFIID, void**);
	HRESULT STDMETHODCALLTYPE AddToStateObject(ID3D12Device7*, const D3D12_STATE_OBJECT_DESC*, ID3D12StateObject*, REFIID, void**);
	HRESULT STDMETHODCALLTYPE CreateRootSignature(ID3D12Device*, UINT, const void*, SIZE_T, REFIID, void**);
	HRESULT STDMETHODCALLTYPE CreateCommandSignature(ID3D12Device*, const D3D12_COMMAND_SIGNATURE_DESC*, ID3D12RootSignature*, REFIID, void**);
	HRESULT STDMETHODCALLTYPE CreateCommittedResource(ID3D12Device*, const D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS, const D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, const D3D12_CLEAR_VALUE*, REFIID, void**);
	HRESULT STDMETHODCALLTYPE CreateCommittedResource1(ID3D12Device4*, const D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS, const D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, const D3D12_CLEAR_VALUE*, ID3D12ProtectedResourceSession*, REFIID, void**);
	HRESULT STDMETHODCALLTYPE CreatePlacedResource(ID3D12Device*, ID3D12Heap*, UINT64, const D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, const D3D12_CLEAR_VALUE*, REFIID, void**);
	HRESULT STDMETHODCALLTYPE CreatePlacedResource1(ID3D12Device8*, ID3D12Heap*, UINT64, const D3D12_RESOURCE_DESC1*, D3D12_RESOURCE_STATES, const D3D12_CLEAR_VALUE*, REFIID, void**);

	HRESULT STDMETHODCALLTYPE CreateDescriptorHeap(ID3D12Device*, const D3D12_DESCRIPTOR_HEAP_DESC*, REFIID, void**);
	void    STDMETHODCALLTYPE CreateRenderTargetView(ID3D12Device*, ID3D12Resource*, const D3D12_RENDER_TARGET_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE);
	void    STDMETHODCALLTYPE CreateDepthStencilView(ID3D12Device*, ID3D12Resource*, const D3D12_DEPTH_STENCIL_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE);
	void    STDMETHODCALLTYPE CreateShaderResourceView(ID3D12Device*, ID3D12Resource*, const D3D12_SHADER_RESOURCE_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE);
	void    STDMETHODCALLTYPE CreateUnorderedAccessView(ID3D12Device*, ID3D12Resource*, ID3D12Resource*, const D3D12_UNORDERED_ACCESS_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE);
	void    STDMETHODCALLTYPE CreateSampler(ID3D12Device*, const D3D12_SAMPLER_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE);
	void    STDMETHODCALLTYPE CreateConstantBufferView(ID3D12Device*, const D3D12_CONSTANT_BUFFER_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE);
	void    STDMETHODCALLTYPE CopyDescriptorsSimple(ID3D12Device*, UINT, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_DESCRIPTOR_HEAP_TYPE);
	void    STDMETHODCALLTYPE CopyDescriptors(ID3D12Device*, UINT, const D3D12_CPU_DESCRIPTOR_HANDLE*, const UINT*, UINT, const D3D12_CPU_DESCRIPTOR_HANDLE*, const UINT*, D3D12_DESCRIPTOR_HEAP_TYPE);

	void STDMETHODCALLTYPE ExecuteCommandLists(ID3D12CommandQueue*, UINT, ID3D12CommandList* const*);
	HRESULT STDMETHODCALLTYPE Signal(ID3D12CommandQueue*, ID3D12Fence*, UINT64);

	void STDMETHODCALLTYPE CopyBufferRegion(ID3D12GraphicsCommandList*, ID3D12Resource*, UINT64, ID3D12Resource*, UINT64, UINT64);
	void STDMETHODCALLTYPE CopyTextureRegion(ID3D12GraphicsCommandList*, const D3D12_TEXTURE_COPY_LOCATION*, UINT, UINT, UINT, const D3D12_TEXTURE_COPY_LOCATION*, const D3D12_BOX*);
	void STDMETHODCALLTYPE CopyResource(ID3D12GraphicsCommandList*, ID3D12Resource*, ID3D12Resource*);
	void STDMETHODCALLTYPE ResolveSubresource(ID3D12GraphicsCommandList*, ID3D12Resource*, UINT, ID3D12Resource*, UINT, DXGI_FORMAT);
	void STDMETHODCALLTYPE ResolveSubresourceRegion(ID3D12GraphicsCommandList1*, ID3D12Resource*, UINT, UINT, UINT, ID3D12Resource*, UINT, D3D12_RECT*, DXGI_FORMAT, D3D12_RESOLVE_MODE);
	void STDMETHODCALLTYPE DrawInstanced(ID3D12GraphicsCommandList*, UINT, UINT, UINT, UINT);
	void STDMETHODCALLTYPE DrawIndexedInstanced(ID3D12GraphicsCommandList*, UINT, UINT, UINT, INT, UINT);
	void STDMETHODCALLTYPE ExecuteIndirect(ID3D12GraphicsCommandList*, ID3D12CommandSignature*, UINT, ID3D12Resource*, UINT64, ID3D12Resource*, UINT64);
	void STDMETHODCALLTYPE Dispatch(ID3D12GraphicsCommandList*, UINT, UINT, UINT);
	void STDMETHODCALLTYPE DispatchMesh(ID3D12GraphicsCommandList6*, UINT, UINT, UINT);
	void STDMETHODCALLTYPE DispatchRays(ID3D12GraphicsCommandList4*, const D3D12_DISPATCH_RAYS_DESC*);
	void STDMETHODCALLTYPE RSSetViewports(ID3D12GraphicsCommandList*, UINT, const D3D12_VIEWPORT*);
	void STDMETHODCALLTYPE RSSetScissorRects(ID3D12GraphicsCommandList*, UINT, const D3D12_RECT*);
	void STDMETHODCALLTYPE RSSetShadingRate(ID3D12GraphicsCommandList5*, D3D12_SHADING_RATE, const D3D12_SHADING_RATE_COMBINER*);
	void STDMETHODCALLTYPE RSSetShadingRateImage(ID3D12GraphicsCommandList5*, ID3D12Resource*);
	void STDMETHODCALLTYPE SetViewInstanceMask(ID3D12GraphicsCommandList1*, UINT);
	void STDMETHODCALLTYPE OMSetRenderTargets(ID3D12GraphicsCommandList*, UINT, const D3D12_CPU_DESCRIPTOR_HANDLE*, BOOL, const D3D12_CPU_DESCRIPTOR_HANDLE*);
	void STDMETHODCALLTYPE OMSetBlendFactor(ID3D12GraphicsCommandList*, const FLOAT*);
	void STDMETHODCALLTYPE OMSetStencilRef(ID3D12GraphicsCommandList*, UINT);
	void STDMETHODCALLTYPE OMSetDepthBounds(ID3D12GraphicsCommandList1*, FLOAT, FLOAT);
	void STDMETHODCALLTYPE BeginRenderPass(ID3D12GraphicsCommandList4*, UINT, const D3D12_RENDER_PASS_RENDER_TARGET_DESC*, const D3D12_RENDER_PASS_DEPTH_STENCIL_DESC*, D3D12_RENDER_PASS_FLAGS);
	void STDMETHODCALLTYPE EndRenderPass(ID3D12GraphicsCommandList4*);
	void STDMETHODCALLTYPE ClearRenderTargetView(ID3D12GraphicsCommandList*, D3D12_CPU_DESCRIPTOR_HANDLE, const FLOAT*, UINT, const D3D12_RECT*);
	void STDMETHODCALLTYPE ClearDepthStencilView(ID3D12GraphicsCommandList*, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_CLEAR_FLAGS, FLOAT, UINT8, UINT, const D3D12_RECT*);
	void STDMETHODCALLTYPE ClearUnorderedAccessViewUint(ID3D12GraphicsCommandList*, D3D12_GPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, ID3D12Resource*, const UINT*, UINT, const D3D12_RECT*);
	void STDMETHODCALLTYPE ClearUnorderedAccessViewFloat(ID3D12GraphicsCommandList*, D3D12_GPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, ID3D12Resource*, const FLOAT*, UINT, const D3D12_RECT*);
	void STDMETHODCALLTYPE SetPipelineState(ID3D12GraphicsCommandList*, ID3D12PipelineState*);
	void STDMETHODCALLTYPE SetPipelineState1(ID3D12GraphicsCommandList4*, ID3D12StateObject*);
	void STDMETHODCALLTYPE SetGraphicsRootSignature(ID3D12GraphicsCommandList*, ID3D12RootSignature*);
	void STDMETHODCALLTYPE SetComputeRootSignature(ID3D12GraphicsCommandList*, ID3D12RootSignature*);
	void STDMETHODCALLTYPE IASetPrimitiveTopology(ID3D12GraphicsCommandList*, D3D12_PRIMITIVE_TOPOLOGY);
	void STDMETHODCALLTYPE IASetVertexBuffers(ID3D12GraphicsCommandList*, UINT, UINT, const D3D12_VERTEX_BUFFER_VIEW*);
	void STDMETHODCALLTYPE IASetIndexBuffer(ID3D12GraphicsCommandList*, const D3D12_INDEX_BUFFER_VIEW*);
	void STDMETHODCALLTYPE ResourceBarrier(ID3D12GraphicsCommandList*, UINT, const D3D12_RESOURCE_BARRIER*);
	void STDMETHODCALLTYPE SetDescriptorHeaps(ID3D12GraphicsCommandList*, UINT, ID3D12DescriptorHeap* const*);
	void STDMETHODCALLTYPE SetGraphicsRootDescriptorTable(ID3D12GraphicsCommandList*, UINT, D3D12_GPU_DESCRIPTOR_HANDLE);
	void STDMETHODCALLTYPE SetComputeRootDescriptorTable(ID3D12GraphicsCommandList*, UINT, D3D12_GPU_DESCRIPTOR_HANDLE);
	void STDMETHODCALLTYPE SetComputeRoot32BitConstant(ID3D12GraphicsCommandList*, UINT, UINT, UINT);
	void STDMETHODCALLTYPE SetGraphicsRoot32BitConstant(ID3D12GraphicsCommandList*, UINT, UINT, UINT);
	void STDMETHODCALLTYPE SetGraphicsRoot32BitConstants(ID3D12GraphicsCommandList*, UINT, UINT, const void*, UINT);
	void STDMETHODCALLTYPE SetComputeRoot32BitConstants(ID3D12GraphicsCommandList*, UINT, UINT, const void*, UINT);
	void STDMETHODCALLTYPE SetGraphicsRootConstantBufferView(ID3D12GraphicsCommandList*, UINT, D3D12_GPU_VIRTUAL_ADDRESS);
	void STDMETHODCALLTYPE SetComputeRootConstantBufferView(ID3D12GraphicsCommandList*, UINT, D3D12_GPU_VIRTUAL_ADDRESS);
	void STDMETHODCALLTYPE SetGraphicsRootShaderResourceView(ID3D12GraphicsCommandList*, UINT, D3D12_GPU_VIRTUAL_ADDRESS);
	void STDMETHODCALLTYPE SetComputeRootShaderResourceView(ID3D12GraphicsCommandList*, UINT, D3D12_GPU_VIRTUAL_ADDRESS);
	void STDMETHODCALLTYPE SetGraphicsRootUnorderedAccessView(ID3D12GraphicsCommandList*, UINT, D3D12_GPU_VIRTUAL_ADDRESS);
	void STDMETHODCALLTYPE SetComputeRootUnorderedAccessView(ID3D12GraphicsCommandList*, UINT, D3D12_GPU_VIRTUAL_ADDRESS);

	HRESULT STDMETHODCALLTYPE Close(ID3D12GraphicsCommandList*);
	HRESULT STDMETHODCALLTYPE Reset(ID3D12GraphicsCommandList*, ID3D12CommandAllocator*, ID3D12PipelineState*);
	void    STDMETHODCALLTYPE ClearState(ID3D12GraphicsCommandList*, ID3D12PipelineState*);
	void    STDMETHODCALLTYPE BeginEvent(ID3D12GraphicsCommandList*, UINT, const void*, UINT);
	void    STDMETHODCALLTYPE EndEvent(ID3D12GraphicsCommandList*);


	ULONG   STDMETHODCALLTYPE Release(ID3D12Resource*);
	HRESULT STDMETHODCALLTYPE SetName(ID3D12Resource*, LPCWSTR);

	UINT64  STDMETHODCALLTYPE GetCompletedValue(ID3D12Fence*);
	HRESULT STDMETHODCALLTYPE SetEventOnCompletion(ID3D12Fence*, UINT64, HANDLE);
	HRESULT STDMETHODCALLTYPE Signal(ID3D12Fence*, UINT64);
}